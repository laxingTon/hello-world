#!/usr/bin/env python
# pylint: disable=line-too-long
"""
    Python Script to Get Project Type Information from Azure DevOps Repositories
"""
import argparse
import logging
import yaml
from azure.devops.connection import Connection
from msrest.authentication import BasicAuthentication
from azure.devops.v7_0.git.models import GitVersionDescriptor

# Configure ArgParser
parser = argparse.ArgumentParser(
    prog="ado_project_type.py",
    description="Query Azure DevOps for Project Type Information from Repositories",
    epilog="",
)

parser.add_argument("-o", "--org", help="Azure Devops Organization", default="vcuvs")
parser.add_argument("-T", "--token", help="ADO Personal Access Token for Authorization")
parser.add_argument("--repo-name", help="Azure DevOps Repo name to check for project types", required=True)
parser.add_argument("--branch", help="Branch name to check (e.g., 'main')", default="main")
parser.add_argument("-d", "--debug", action="store_true", help="Turn on debug logging")
args = parser.parse_args()

# Configure logging
if args.debug:
    logging.basicConfig(level=logging.DEBUG, format='%(message)s')
else:
    logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)
logger.debug('Debug Logging turned on')

organization = args.org
personal_access_token = args.token
organization_url = f'https://dev.azure.com/{organization}'

# Authenticate with Azure DevOps
credentials = BasicAuthentication('', personal_access_token)
connection = Connection(base_url=organization_url, creds=credentials)

# Git client to interact with repositories
git_client = connection.clients.get_git_client()

# Function to fetch repository files and find the project type in project_type.yml
def get_project_type_from_repo(repo_name, branch_name):
    # Properly create the version descriptor using GitVersionDescriptor
    version_descriptor = GitVersionDescriptor(
        version=branch_name,
        version_type="branch"  # Specify that the version is a branch
    )

    # Get all files from the repository (no pagination)
    items = git_client.get_items(
        repository_id=repo_name,
        scope_path='/',  # Root directory
        version_descriptor=version_descriptor,
        recursion_level='Full',  # Get all files in all subdirectories
    )

    # Look for the YAML file containing project types
    yaml_file_path = '/project_type.yml'
    for file in items:
        if file.path == yaml_file_path:
            # Fetch the content of the YAML file
            content = git_client.get_item_content(
                repository_id=repo_name,
                path=yaml_file_path,
                version_descriptor=version_descriptor
            )
            try:
                yaml_content = content.decode('utf-8')
                project_data = yaml.safe_load(yaml_content)
                return project_data.get('applications', [])
            except yaml.YAMLError as e:
                logger.error(f"Error reading YAML content: {e}")
            break
    return []

# Main logic
def main():
    # Fetch project types from the repo's YAML configuration
    applications = get_project_type_from_repo(args.repo_name, args.branch)

    if applications:
        for app in applications:
            print(f"Application: {app['name']} - Project Type: {app['project_type']}")
    else:
        print("No project type information found in the repository.")

if __name__ == "__main__":
    main()
